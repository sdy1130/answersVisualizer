<h1 class="title">The End: A Hopeful Chapter of Life</h1>
<div class="book_wrapper">
    <a id="next_page_button"></a>
    <a id="prev_page_button"></a>
    <div id="loading" class="loading">Loading pages...</div>
    <div id="mybook" style="display:none;">
        <div class="b-load">
            <div>
                <h1>1. What are your fears about end-of-life?</h1>
                <p>
                  This is a wordcloud of everyone's response!
                </p>
                <img src=<%= image_url("red-arrow.png") %> alt="" style="float:left; width:20%"/>
                <div 
                  id="wordCloud_1"
                  style="width:500px; 
                  height:500px; 
                  background-position:center;"></div>
            </div>
            <div style="overflow: scroll; height: 660px;">
                <h1>All Answers!</h1>
                <div style="text-align: center;">
                  <% @answers.each do |answer| %>
                    <div class="card">
                      <div class="answer_box"><p><%= answer.answer_1 %></p></div>
                      <p class="price" style="font-size: 18px"><%= answer.age%> / <%= answer.country_name %></p>
                      <% if user_signed_in? %>
                        <p><button>
                          <%= link_to 'Delete', answer_path(answer), method: :delete, data: { confirm: 'Are you sure?' }, :class => "card-link" %>
                        </button></p>
                      <% end %>
                    </div>
                  <% end %>
                </div>
            </div>
            <div>
                <h1>2. What legacy are you hoping to leave behind?</h1>
                <p>
                  This is a wordcloud of everyone's response!
                </p>
                <img src=<%= image_url("red-arrow.png") %> alt="" style="float:left; width:20%"/>
                <div 
                  id="wordCloud_2"
                  style="width:500px; 
                  height:500px; 
                  background-position:center;"></div>
            </div>
            <div style="overflow: scroll; height: 660px;">
                <h1>All Answers!</h1>
                <div style="text-align: center;">
                  <% @answers.each do |answer| %>
                    <div class="card">
                      <div class="answer_box"><p><%= answer.answer_2 %></p></div>
                      <p class="price" style="font-size: 18px"><%= answer.age%> / <%= answer.country_name %></p>
                      <% if user_signed_in? %>
                        <p><button>
                          <%= link_to 'Delete', answer_path(answer), method: :delete, data: { confirm: 'Are you sure?' }, :class => "card-link" %>
                        </button></p>
                      <% end %>
                    </div>
                  <% end %>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- The JavaScript -->

<script>
 fetch("https://textvis-word-cloud-v1.p.rapidapi.com/v1/textToCloud", {
   method: "POST",
   headers: {
     "x-rapidapi-host": "textvis-word-cloud-v1.p.rapidapi.com",
     "x-rapidapi-key": "88e342cc0bmsh3054f62a586d151p132d3fjsn51ec7f3448ac",
     "content-type": "application/json",
     accept: "application/json"
   },
   body: JSON.stringify({
     text: "<%= @all_answer_1 %>",
     scale: 1,
     width: 500,
     height: 500,
     colors: ["#375E97", "#FB6542", "#FFBB00", "#3F681C"],
     font: "Tahoma",
     use_stopwords: true,
     language: "en",
     uppercase: false
   })
 })
   .then(response => {
     return response.text();
   })
   .then(wordCloud => {
     var img = document.getElementById("wordCloud_1");
     img.style.backgroundImage = "url(" + wordCloud + ")";
   })
   .catch(err => {
     console.log(err);
   });
</script>

<script>
 fetch("https://textvis-word-cloud-v1.p.rapidapi.com/v1/textToCloud", {
   method: "POST",
   headers: {
     "x-rapidapi-host": "textvis-word-cloud-v1.p.rapidapi.com",
     "x-rapidapi-key": "88e342cc0bmsh3054f62a586d151p132d3fjsn51ec7f3448ac",
     "content-type": "application/json",
     accept: "application/json"
   },
   body: JSON.stringify({
     text: "<%= @all_answer_2 %>",
     scale: 1,
     width: 500,
     height: 500,
     colors: ["#375E97", "#FB6542", "#FFBB00", "#3F681C"],
     font: "Tahoma",
     use_stopwords: true,
     language: "en",
     uppercase: false
   })
 })
   .then(response => {
     return response.text();
   })
   .then(wordCloud => {
     var img = document.getElementById("wordCloud_2");
     img.style.backgroundImage = "url(" + wordCloud + ")";
   })
   .catch(err => {
     console.log(err);
   });
</script>

<script type="text/javascript">
    $(function() {
        var $mybook 		= $('#mybook');
        var $bttn_next		= $('#next_page_button');
        var $bttn_prev		= $('#prev_page_button');
        var $loading		= $('#loading');
        var $mybook_assets	= $mybook.find('img');
        var cnt_assets		= $mybook_assets.length;
        var loaded			= 0;
        //preload all the /assets in the book,
        //and then call the booklet plugin

        $mybook_assets.each(function(){
            var $img 	= $(this);
            var source	= $img.attr('src');
            $('<img/>').load(function(){
                ++loaded;
                if(loaded == cnt_assets){
                    $loading.hide();
                    $bttn_next.show();
                    $bttn_prev.show();
                    $mybook.show().booklet({
                        name:               null,                            // name of the booklet to display in the document title bar
                        width:              1080,                             // container width
                        height:             665,                             // container height
                        speed:              600,                             // speed of the transition between pages
                        direction:          'LTR',                           // direction of the overall content organization, default LTR, left to right, can be RTL for languages which read right to left
                        startingPage:       0,                               // index of the first page to be displayed
                        easing:             'easeInOutQuad',                 // easing method for complete transition
                        easeIn:             'easeInQuad',                    // easing method for first half of transition
                        easeOut:            'easeOutQuad',                   // easing method for second half of transition

                        closed:             false,                           // start with the book "closed", will add empty pages to beginning and end of book
                        closedFrontTitle:   null,                            // used with "closed", "menu" and "pageSelector", determines title of blank starting page
                        closedFrontChapter: null,                            // used with "closed", "menu" and "chapterSelector", determines chapter name of blank starting page
                        closedBackTitle:    null,                            // used with "closed", "menu" and "pageSelector", determines chapter name of blank ending page
                        closedBackChapter:  null,                            // used with "closed", "menu" and "chapterSelector", determines chapter name of blank ending page
                        covers:             false,                           // used with  "closed", makes first and last pages into covers, without page numbers (if enabled)

                        pagePadding:        10,                              // padding for each page wrapper
                        pageNumbers:        true,                            // display page numbers on each page

                        hovers:             false,                            // enables preview pageturn hover animation, shows a small preview of previous or next page on hover
                        overlays:           false,                            // enables navigation using a page sized overlay, when enabled links inside the content will not be clickable
                        tabs:               false,                           // adds tabs along the top of the pages
                        tabWidth:           60,                              // set the width of the tabs
                        tabHeight:          20,                              // set the height of the tabs
                        arrows:             false,                           // adds arrows overlayed over the book edges
                        cursor:             'pointer',                       // cursor css setting for side bar areas

                        hash:               false,                           // enables navigation using a hash string, ex: #/page/1 for page 1, will affect all booklets with 'hash' enabled
                        keyboard:           true,                            // enables navigation with arrow keys (left: previous, right: next)
                        next:               $bttn_next,          			// selector for element to use as click trigger for next page
                        prev:               $bttn_prev,          			// selector for element to use as click trigger for previous page

                        menu:               null,                            // selector for element to use as the menu area, required for 'pageSelector'
                        pageSelector:       false,                           // enables navigation with a dropdown menu of pages, requires 'menu'
                        chapterSelector:    false,                           // enables navigation with a dropdown menu of chapters, determined by the "rel" attribute, requires 'menu'

                        shadows:            true,                            // display shadows on page animations
                        shadowTopFwdWidth:  166,                             // shadow width for top forward anim
                        shadowTopBackWidth: 166,                             // shadow width for top back anim
                        shadowBtmWidth:     50,                              // shadow width for bottom shadow

                        before:             function(){},                    // callback invoked before each page turn animation
                        after:              function(){}                     // callback invoked after each page turn animation
                    });
                    Cufon.refresh();
                }
            }).attr('src',source);
        });
				
    });
</script>

